package com.project1.hashtables.util;

import com.project1.flows.Flow;
import com.project1.hashtables.interfaces.AbstractHashTable;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.util.*;

/**
 * Helper for tester classes.
 */
public class TestUtil {

    /**
     * Generates flows with random flow IDs.
     *
     * @param number the number of flows to be generated.
     * @return the generated flows.
     */
    public static Flow[] getFlows(int number) {
        Random r = new Random();
        List<Flow> list = new ArrayList<>();
        for (int i = 0; i < number; i++) {
            list.add(new Flow(r.nextInt(256) + "." + r.nextInt(256) + "." + r.nextInt(256) + "." + r.nextInt(256)));
        }
        return list.toArray(new Flow[0]);
    }

    /**
     * Creates a table of input data and the hash values generated by each function for that input data.
     *
     * @param nums              the input data.
     * @param table             the hash table in which the data is to be inserted.
     * @param numberOfFunctions the number of hash functions that are to be used for insertion.
     * @param <T>               the type of entries which are to be inserted.
     * @return the data containing the entries and the hash values for each entry.
     */
    public static <T> String[][] getData(T[] nums, AbstractHashTable<T> table, int numberOfFunctions) {
        String[][] result = new String[nums.length + 1][2 + numberOfFunctions];

        List<String> headers = new ArrayList<>();
        headers.add("Sr. no.");
        headers.add("Key");
        for (int i = 1; i <= numberOfFunctions; i++) {
            String temp = "h" + i + "(x)";
            headers.add(temp);
        }

        result[0] = headers.toArray(new String[0]);

        for (int i = 0; i < nums.length; i++) {
            String[] temp = new String[2 + numberOfFunctions];
            temp[0] = String.valueOf(i + 1);
            temp[1] = String.valueOf(nums[i].toString());
            int index = 2;
            for (int j = 1; j <= numberOfFunctions; j++) {
                temp[index++] = String.valueOf(table.hashFunction(nums[i], j));
            }
            result[i + 1] = temp;
        }
        return result;
    }

    /**
     * Runs a demo on the input hash table and prints the hash table after inserting all the flows.
     *
     * @param table             the hash table on which the demo is to be run.
     * @param numberOfFunctions the number of hash functions to be used.
     * @param flows             the flows which are to be inserted to the test the hash table.
     * @param fileName          the file in which the output is to be printed.
     * @throws FileNotFoundException if unable to find the file to write to.
     */
    public static void testHashTable(AbstractHashTable<Flow> table, int numberOfFunctions, Flow[] flows, String fileName) throws FileNotFoundException {
        for (Flow i : flows) {
            table.put(i);
        }
        String[][] data = getData(flows, table, numberOfFunctions);
        PrintStream printWriter = new PrintStream(new FileOutputStream(fileName));
        table.printTable(printWriter);
        printWriter.close();
        Set<Integer> skip = new HashSet<>();
        skip.add(0);
        skip.add(1);
        //printTable(data, true, true, skip);
    }
}
